""" Create label map NRRD files from histolozee segmentation. Input are
labelmap svg images generated by Histolozee and Histolozee project .zee file.

Created by Mukund on 2022-02-28

Usage:

python s1_hz_seg_to_nrrd.py \
    inp: slide_id \
    inp: path to filenames map csv to convert between old and new nissl filenames \
    inp: path to an hz file with all colors label information \
    inp: to folder with labelmap svgs \
    out: path to output folder to store nrrd and color to region_id mapper pickle files


Usage example:

python src/python/scripts/v2/s1_hz_seg_to_nrrd.py \
    -1 \
    /Users/mraj/Desktop/work/data/mouse_atlas/data_v3_nissl_post_qc/s2_seg_ids/filenames_map.csv \
    /Users/mraj/Desktop/work/data/mouse_atlas/data_v3_nissl_post_qc/s0_start_formatted_data/hz-project.zee \
    /Users/mraj/Desktop/work/data/mouse_atlas/data_v3_nissl_post_qc/s2_seg_ids/tiff_from_vsi_segs \
    /Users/mraj/Desktop/work/data/mouse_atlas/data_v3_nissl_post_qc/s2_seg_ids/seg_output

References:
- https://www.geeksforgeeks.org/how-to-convert-images-to-numpy-array/
- https://stackoverflow.com/questions/16414559/how-to-use-hex-without-0x-in-python
- https://stackoverflow.com/questions/42594695/how-to-apply-a-function-map-values-of-each-element-in-a-2d-numpy-array-matrix

"""
from pathlib import Path
import sys
path_root = Path(__file__).parents[4]
sys.path.append(str(path_root))
import csv

import yaml
from PIL import Image
from numpy import asarray
import numpy as np
import os
import subprocess
import nrrd
# import "src/python/utils/parsers.py" as parsers
# import parsers as parsers
import src.python.utils.parsers as parsers
import src.python.utils.io as io
# from src.python.utils import parsers
import pickle
import json
from produtils import dprint

nissl_id = int(sys.argv[1])
mapperfile_csv = sys.argv[2]
hz_xml_path = sys.argv[3]
label_folder = sys.argv[4]
op_path = sys.argv[5]


print("")
mapper, mapper_to_id = parsers.get_label_dict(hz_xml_path)
mapper['ffffff'] = 0

with open(f'{op_path}/mapper_to_alphaid.json', "w") as outfile:
    json.dump(mapper_to_id, outfile)

with open(f'{op_path}/mapper_to_numid.json', "w") as outfile:
    json.dump(mapper, outfile)

mapper_to_new_filename, mapper_to_old_filename = io.get_filenames_map(mapperfile_csv)


if (nissl_id<0):
    print("processing all")
    # nissl_ids = [141, 143]
    # nissl_ids = [123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143]
    # nissl_ids = [1, 3, 133, 135, 137, 139, 143]
    # nissl_ids = [i for i in np.arange(1,228,2)]
    # nissl_ids.remove(5)
    # nissl_ids.remove(77)
    # nissl_ids.remove(167) # not needed here
    # nissl_ids = [159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181]
    # nissl_ids = [i for i in np.arange(159, 228, 2)]
    # nissl_ids = [i for i in np.arange(119, 228, 2)]
    nissl_ids = [i for i in np.arange(1, 228, 2)]
    nissl_ids.remove(5)
    nissl_ids.remove(77)
    nissl_ids.remove(167) # not needed here
else:
    nissl_ids = [nissl_id]

files = []
for nissl_id in nissl_ids:
    filename_old = mapper_to_old_filename[nissl_id]
    files.append(filename_old)

def mapper_wrapper(e,f,g ):
    # key = format(e,'x')+str(f)+str(g)

    # converting to hexadecimal values
    d1 = format(e,'x')
    d2 = format(f,'x')
    d3 = format(g,'x')

    # dealing with single digit entries
    d1 = d1.zfill(2)
    d2 = d2.zfill(2)
    d3 = d3.zfill(2)
    key = d1+d2+d3
    if (key in mapper):
        label = mapper[key]
    else:
        label = 0
    return (label)

print("")
lfunc = np.vectorize(mapper_wrapper)
numpydata = None

labels_list = [] # stores labels identified in each run

ctr = 0
for idx,file in enumerate(files):

    # create tiff filename
    base = os.path.basename(file)
    dirname = os.path.dirname(file)
    png_name = dirname+"/"+base.replace(".svg", ".png" )
    # tif_name = dirname+"/"+base.replace(".svg", "_test.tiff" )

    tif_name = f"{label_folder}/{file}"
    base = os.path.basename(tif_name)
    dirname = os.path.dirname(tif_name)
    svg_name = f'{dirname}/{base.replace("tif", "svg")}'
    png_name = f'{dirname}/{base.replace("tif", "png")}'
    print ("Reading label file: ", svg_name)

    print(svg_name)
    # convert to tiff/png
    # subprocess.run(["convert", file, tiff_name])
    # uses inkscape since this conversion not handled correctly by imagemagick
    subprocess.run(["inkscape", "--export-type=png", svg_name ])

    # open converted labelmap file
    img = Image.open(png_name)
    # convert img to numpy array
    # nd = asarray(img)
    nd = np.asarray(img)
    nd = np.swapaxes(nd,0,1)

    labels_current = lfunc(nd[:,:,0], nd[:,:,1], nd[:,:,2])
    ctr = ctr+1

    # print("labels_current", np.shape(labels_current))
    print(labels_current)
    labels_current = np.asarray(labels_current)

    print("labels_current", np.shape(labels_current))

    # img = Image.fromarray(labels_current)
    img = Image.fromarray(np.uint8(labels_current) , 'L')
    # img.save(tif_name)

    numpydata = labels_current
    print(np.shape(np.where(numpydata==109)))
    print(np.shape(numpydata))
    cur_labels = list(np.unique(numpydata))
    cur_labels.remove(0)

    to_write_list = [nissl_ids[idx]]
    to_write_list.extend(cur_labels)
    labels_list.append(to_write_list)
    # if (numpydata is not None):
    #     numpydata = np.stack([numpydata,labels_current], axis=2)
    # else:
    #     numpydata = labels_current

    print("")
    # create nrrd file
    # nrrdfile = dirname+"/labelmaps/"+base.replace(".svg", ".nrrd").replace("nis", "lmap")
    nrrd_name = f'{op_path}/{base.replace("tif", "nrrd")}'
    print ("Output labelmap written to: ", nrrd_name)
    nrrd.write(nrrd_name, numpydata)

labels_list_file = f'{op_path}/{"labels_list.csv"}'
with open(labels_list_file, "w") as f:
    wr = csv.writer(f)
    wr.writerows(labels_list)
