""" Script to process annodata files generated by R script (which generates the
annodata from Jonah's qs object). Output expected to be zarr file to be used
downstream for interactive visualization.

Usage:

python s8_process_integ_mat.py
    inp: input folder
    out: intermediate zarr dir
    out: final zarr dir

Usage example:

python src/python/scripts/v2/s8_process_integ_mat.py \
    /Users/mraj/Desktop/work/data/temp_data/2022-05-04/integrated_mats \
    /Users/mraj/Desktop/work/data/temp_data/2022-05-04/gene_jsons

Created by Mukund on 2022-05-04

References:
- on sparse and zarr https://github.com/zarr-developers/zarr-python/issues/424

"""

import sys
import anndata as ann
import numpy as np
from scipy.sparse import csr_matrix, hstack
import zarr
import json
from produtils import dprint
import os
import shutil

in_folder = sys.argv[1]
op_folder = sys.argv[2]

genes_list = ['Pcp4', 'Calb1', 'Gng13', 'Gabra6']

for pid in range(1,4):

    ip_coords_file  = f'{in_folder}/ad_coords_{str(pid)}.h5ad'
    ip_counts_file  = f'{in_folder}/ad_counts_{str(pid)}.h5ad'

    counts = ann.read_h5ad(ip_counts_file)
    coords = ann.read_h5ad(ip_coords_file)

    counts_X = csr_matrix(counts.X).transpose()
    coords_X = csr_matrix(coords.X)
    coords_dense_np = np.array(coords_X.todense())
    data = {'x': coords_dense_np[:, 0].astype(int).tolist(),
            'y': coords_dense_np[:, 1].astype(int).tolist(),
            'z': coords_dense_np[:, 2].astype(int).tolist()}
    json_string = json.dumps(data)

    puck_folder = f'{op_folder}/puck{pid}'
    if os.path.exists(puck_folder):
        shutil.rmtree(puck_folder)
    os.mkdir(puck_folder)
    json_file = f'{puck_folder}/coords.json'
    # Directly from dictionary
    with open(json_file, 'w') as outfile:
        json.dump(data, outfile, separators=(',', ':'))

    genes = list(counts.obs_names)

    # counts_dense = counts_X.todense().astype(int)

    # npz_file = f'{op_folder}/temp.npz'
    # np.savez_compressed(npz_file, counts_dense=counts_dense)
    # v = np.load(npz_file)
    # counts_dense = v['counts_dense']
    # umi_counts = np.squeeze(np.sum(counts_dense, axis=1))
    # dprint("counts_dense shape ", np.shape(counts_dense))
    # dprint("umi_counts shape ", np.shape(umi_counts))
    # bead_inds = np.where(umi_counts>100)
    # dprint(bead_inds[0])
    # dprint(len(list(bead_inds[0])))


    gene_cnts = {}
    for gene in genes_list:
        gene_idx = genes.index(gene)
        specific_gene_cnts = counts_X.getcol(gene_idx)
        spec_gene_cnts_dense = np.squeeze(np.array(specific_gene_cnts.todense()))
        gene_cnts[gene]=json.dumps(spec_gene_cnts_dense.astype(int).tolist())
        # gene_cnts['Calb1'] = 

    for key in gene_cnts:
        json_file = f'{puck_folder}/gene_{key}.json'
        # Directly from dictionary
        with open(json_file, 'w') as outfile:
            tmp_dict = {key:gene_cnts[key]}
            json.dump(tmp_dict, outfile, separators=(',', ':'))

    dprint(f'puck {pid} done')

