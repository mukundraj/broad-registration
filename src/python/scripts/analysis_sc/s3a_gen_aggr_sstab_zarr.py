"""Format aggregated single cell tab data aggregated by cellclass and clade
(generated by s2b_gen_aggr_sstab_h5ad.R) into a zarr file for use in the
portal.

Usage:

python s3a_gen_aggr_sstab_zarr.py
    in: data_root
    in: input directory
    in: clade annotations csv generated by s2b_gen_aggr_sstab_h5ad.R
    in: scZarr file
    op: output directory

Example:

python src/python/scripts/analysis_sc/s3a_gen_aggr_sstab_zarr.py \
    ~/Desktop/work/data/mouse_atlas \
    /single_cell/s2/agged_h5ad \
    /single_cell/s2/cladeAnnotations.csv \
    /single_cell/s1/scZarr_321017.zarr \
    /single_cell/s3 \

Supplementary:

gsutil -m rsync -r ~/Desktop/work/data/mouse_atlas/single_cell/s3/aggedSCdata.zarr gs://bcdportaldata/batch_231112/single_cell/v3/aggedSCdata.zarr

gsutil -m rsync -r ~/Desktop/work/data/mouse_atlas/single_cell/s3/aggedSCdata.zarr/metadata gs://bcdportaldata/batch_231112/single_cell/v3/aggedSCdata.zarr/metadata

gsutil -m rsync -r ~/Desktop/work/data/mouse_atlas/single_cell/s3/aggedSCdata.zarr/var gs://bcdportaldata/batch_231112/single_cell/v3/aggedSCdata.zarr/var

Created by Mukund on 2023-11-15
"""
import zarr
import anndata
import numcodecs
import numpy as np
from produtils import dprint

import sys

data_root = sys.argv[1]
ipath = data_root+sys.argv[2]
ipath_clade_annotations = data_root+sys.argv[3]
input_zarr_path = data_root+sys.argv[4]
op_zarr_path = data_root+sys.argv[5]+'/aggedSCdata.zarr'

fnames = [
    'clades_agged_avgs',
    'clades_agged_counts',
    'clades_agged_nz_pct',
    'cellclasses_agged_avgs',
    'cellclasses_agged_counts',
    'cellclasses_agged_nz_pct',
]

outgroup = [
    'clades/avg',
    'clades/counts',
    'clades/nz_pct',
    'cellclasses/avg',
    'cellclasses/counts',
    'cellclasses/nz_pct',
]

# open input zarr
z = zarr.open( input_zarr_path, mode='r')
gene_names = z.var.genes[:]
print('gene_names', gene_names)



z = zarr.open( op_zarr_path, mode='w')

var_group = z.create_group(f'var', overwrite=True)
var_group.zeros('genes', shape=(len(gene_names)), dtype='object', object_codec=numcodecs.VLenUTF8())[:] = gene_names

metadataGroup = z.create_group(f'metadata', overwrite=True)

for fname,outgroup in zip(fnames, outgroup):
    print(f'Loading {fname}')
    adata = anndata.read_h5ad(ipath+'/'+fname+'.h5ad')

    print(f'Writing {fname}')
    nAggedClusters = adata.shape[0]
    nGenes = adata.shape[1]
    cur_group = z.create_group(f'{outgroup}', overwrite=True)
    X = cur_group.zeros('X', shape=(nAggedClusters, nGenes), chunks=(nAggedClusters, 1), dtype='f4')
    X[:] = adata.X

    # get global max avg val for clades and cellclasses
    if (fname == 'clades_agged_avgs'):
        # get global max avg val
        globalMaxAvgVal = str(round(np.max(adata.X)))
        dprint('globalMaxAvgVal', globalMaxAvgVal)
        globalMaxAvgValArray = metadataGroup.zeros('clades_globalMaxAvgVal', shape=(1), dtype='object', object_codec=numcodecs.VLenUTF8())
        globalMaxAvgValArray[:] = globalMaxAvgVal

    elif (fname == 'cellclasses_agged_avgs'):
        # get global max avg val
        globalMaxAvgVal = str(round(np.max(adata.X)))
        dprint('globalMaxAvgVal', globalMaxAvgVal)
        globalMaxAvgValArray = metadataGroup.zeros('cellclasses_globalMaxAvgVal', shape=(1), dtype='object', object_codec=numcodecs.VLenUTF8())
        globalMaxAvgValArray[:] = globalMaxAvgVal

# get clade additional metadata

# get clade annotations and store in dict
clade_annotations = {}
with open(ipath_clade_annotations, 'r') as f:
    # skip header
    next(f)

    for line in f:
        line = line.strip().split(',')

        clade = line[1].replace('"', '')
        anno = line[2].replace('"', '')
        clade_annotations[clade] = anno

# get clade names from agged list and create clade annotations list in same order
clade_names = []
clade_annnotations_list = []
adata = anndata.read_h5ad(ipath+'/clades_agged_avgs.h5ad')
for clade in adata.obs.to_numpy():
    clade_names.append(clade[0])
    clade_annnotations_list.append(clade_annotations[clade[0]])

nClades = len(clade_names)
cladesArray = metadataGroup.zeros('clades', shape=(nClades), dtype='object', object_codec=numcodecs.VLenUTF8())
cladesArray[:] = clade_names

nClades = len(clade_names)
cladesAnnotationsArray = metadataGroup.zeros('cladesAnnotations', shape=(nClades), dtype='object', object_codec=numcodecs.VLenUTF8())
cladesAnnotationsArray[:] = clade_annnotations_list

# get cell class names
cellclass_names = []
adata = anndata.read_h5ad(ipath+'/cellclasses_agged_avgs.h5ad')
for cellclass in adata.obs.to_numpy():
    cellclass_names.append(cellclass[0])
nCellclasses = len(cellclass_names)
cellclassesArray = metadataGroup.zeros('cellclasses', shape=(nCellclasses), dtype='object', object_codec=numcodecs.VLenUTF8())
cellclassesArray[:] = cellclass_names


dprint(z.tree())

print('Done!')
