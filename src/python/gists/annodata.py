
""" Just stash of script to process annodata files generated by R script (which generates the
annodata from Jonah's qs object). Output expected to be zarr file to be used
downstream for interactive visualization.

Usage:

python filename.py
    inp: input folder
    out: intermediate zarr dir
    out: final zarr dir

Usage example:

python path-to-filename.py \
    /Users/mraj/Desktop/work/data/temp_data/2022-05-04/integrated_mats \
    /Users/mraj/Desktop/work/data/temp_data/2022-05-04/temp_zarr \
    /Users/mraj/Desktop/work/data/temp_data/2022-05-04/final_zarr

Created by Mukund on 2022-05-04

References:
- on sparse and zarr https://github.com/zarr-developers/zarr-python/issues/424

"""

import sys
import anndata as ann
import numpy as np
from scipy.sparse import csr_matrix, hstack
import zarr
import json

in_folder = sys.argv[1]
op_tmp = sys.argv[2]
op_fin = sys.argv[3]

inp_file_coords1 = f'{in_folder}/ad_coords_1.h5ad'
inp_file_coords2 = f'{in_folder}/ad_coords_2.h5ad'
inp_file_counts1=  f'{in_folder}/ad_counts_1.h5ad'
inp_file_counts2=  f'{in_folder}/ad_counts_2.h5ad'

zarr_file = f'{op_fin}/beadxgene_v0.1.zarr'

coords1 = ann.read_h5ad(inp_file_coords1)
coords2 = ann.read_h5ad(inp_file_coords2)

counts1 = ann.read_h5ad(inp_file_counts1)
counts2 = ann.read_h5ad(inp_file_counts2)

# create one group/array
# coords1 = csr_matrix(coords1.X)
# coords2 = csr_matrix(coords2.X)

counts1_X = csr_matrix(counts1.X).transpose()
coords1_X = csr_matrix(coords1.X)
# counts2 = csr_matrix(counts2.X).transpose()
print(counts1.shape)
print(coords1.shape)
print(type(counts1))

print(counts1)
genes = list(counts1.obs_names)

op_tmp_zarr1 = f'{op_tmp}/tmp_zarr1.zarr'
zarrfile = zarr.open(op_tmp_zarr1, mode='w')

root = zarr.group(op_tmp_zarr1)
puck1 = root.create_group('puck2')

print(genes.index('Pcp4'))

idx = genes.index('Pcp4')

row = counts1_X.getrow(idx)

row_dense = np.squeeze(np.array(row.todense()))
coords1_dense = np.array(coords1_X.todense())
print(np.shape(row_dense))

# print(np.shape(row_dense))

indices = np.where(row_dense>0)
# print("indices", indices)
print("indices len", len(indices[0]))

# print(np.shape(coords1_dense))
# print(coords1_dense)

filtered_coords_1 = coords1_dense[indices]
print(np.shape(coords1_dense))
print(np.shape(coords1_dense[indices]))

gene1 = puck1.create_dataset('gene2',shape=filtered_coords_1.shape, chunks=(None, None), dtype='i4')
gene1[:] = filtered_coords_1
print(root.tree())




# root = zarr.open('data/example.zarr', mode='r') # alternative command
zstore = zarr.DirectoryStore(op_tmp_zarr1)
root = zarr.group(zstore)
print(root.tree())
print(root['puck2/gene2'][:])

print("done, zarr at:", op_tmp_zarr1)


print(coords1_dense[:,0])

data = {'x': coords1_dense[:, 0].astype(int).tolist(),
        'y': coords1_dense[:, 1].astype(int).tolist(),
        'z': coords1_dense[:, 2].astype(int).tolist()}


json_string = json.dumps(data)

json_file = f'{op_tmp}/test.json'
# Directly from dictionary
with open(json_file, 'w') as outfile:
    json.dump(data, outfile, separators=(',', ':'))
